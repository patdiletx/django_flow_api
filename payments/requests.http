# ### Crear un nuevo pago en Flow
# POST http://localhost:8000/api/create-payment/
# Content-Type: application/json

# {
#     "amount": 3000,
#     "commerceOrder": "124",
#     "subject": "Compra con una herramienta genial"
# }


# # ### C 
# POST https://django-flow-api.onrender.com/api/create-payment/
# Content-Type: application/json

# ¡Claro! Aquí tienes el código para probar tu endpoint /api/create-payment/ actualizado usando la extensión REST Client en VS Code.

# Este ejemplo incluye los campos que ahora espera tu backend, como currency, customer_email, y el objeto shippingDetails, además del return_url que tu frontend FungiGrow proporcionará.

# Instrucciones:

# Copia y pega este contenido en tu archivo .http o .rest en VS Code.
# Importante - Ajusta los siguientes valores:
# Reemplaza https://django-flow-api.onrender.com en la variable @baseUrl con la URL real de tu servicio desplegado en Render.com.
# En el cuerpo JSON, reemplaza https://<URL_BASE_FUNGIGROW>/checkout/confirmation en el campo return_url con la URL de retorno real de tu tienda FungiGrow.
# Para cada prueba, usa un valor nuevo y único para commerceOrder.
# Ajusta los demás valores (amount, subject, customer_email, y los detalles en shippingDetails) según sea necesario para tu prueba.
# Haz clic en el enlace "Send Request" que la extensión REST Client muestra encima de la petición POST.
# <!-- end list -->

# HTTP

# Variable para la URL base de tu API
# Reemplaza con la URL de tu servicio en Render.com
# @baseUrl = https://django-flow-api.onrender.com
# Para pruebas locales, sería:
# @baseUrl = http://localhost:8000

### Crear un nuevo pago (con todos los campos, incluyendo currency y shippingDetails)
# Este endpoint ahora espera 'currency', 'customer_email' y 'shippingDetails'
# enviados por el frontend FungiGrow.
# POST {{baseUrl}}/api/create-payment/
# Content-Type: application/json

# {
#     "amount": 1000,
#     "commerceOrder": "PROD-TEST-008",
#     "subject": "Prueba Produccion JSON Corregido",
#     "currency": "CLP",
#     "return_url": "https://fungigrow.cl/checkout/confirmation",
#     "customer_email": "patricio.dilet@gmail.com",
#     "shippingDetails": {
#         "nombreCompleto": "Patricio Diaz Valido",
#         "rut": "15440302-7",
#         "email": "patricio.dilet@gmail.com",
#         "direccion": "Calle Valida 123",
#         "comuna": "Comuna Valida",
#         "region": "Region Valida",
#         "telefono": "+56911223344"
#     }
# }


# Variable para la URL base de tu API
# Reemplaza con la URL de tu servicio en Render.com o localhost para pruebas locales
# @baseUrl = https://django-flow-api.onrender.com
# @baseUrl = http://localhost:8000


### 1. Listar todos los productos activos
# Este endpoint debería devolver un array JSON con tus productos.
# GET {{baseUrl}}/api/products/
# Content-Type: application/json


### 2. Ver detalle de un producto específico por su slug
# RECUERDA: Reemplaza '<el-slug-de-tu-producto>' con un slug real de tu base de datos.
# Por ejemplo, si creaste un producto con nombre "Kit de Cultivo Ostra" y slug "kit-cultivo-ostra",
# la URL sería: {{baseUrl}}/api/products/kit-cultivo-ostra/
# GET {{baseUrl}}/api/products/kit-cultivo-ostra-rosado
# Content-Type: application/json


### Ejemplo de un producto específico (descomenta y ajusta el slug):
# GET {{baseUrl}}/api/products/kit-cultivo-ostra-rosado/
# Content-Type: application/json







# # Variable para la URL base de tu API
# # Reemplaza con la URL de tu servicio en Render.com
# @baseUrl = https://django-flow-api.onrender.com
# # Para pruebas locales, sería:
# # @baseUrl = http://localhost:8000

# ### 1. Consultar estado de orden por 'commerce_order'
# # Reemplaza 'FUNGIGROW-12345' con un ID de orden real de tu base de datos.
# GET {{baseUrl}}/api/query-order-status/?commerce_order=FUNGIGROW-1748544204786
# Content-Type: application/json


# ### 2. Consultar estado de orden por 'email'
# # Reemplaza 'cliente.real@example.com' con un email real de una orden en tu base de datos.
# # Esto podría devolver una lista si hay múltiples órdenes con el mismo email.
# GET {{baseUrl}}/api/query-order-status/?email=patricio.dilet@gmail.com
# Content-Type: application/json


# ### 3. Consultar estado de orden por 'phone'
# # Reemplaza '+56912345678' con un número de teléfono real (en el formato exacto en que se guardó)
# # de una orden en tu base de datos. El '+' debe ser codificado como %2B si lo escribes directo en una URL,
# # pero REST Client usualmente maneja bien los caracteres especiales en la variable.
# # Si tienes '+' en el número, prueba con y sin %2B.
# # Ejemplo con el número +56912345678 (codificado):
# GET {{baseUrl}}/api/query-order-status/?phone=%2B56928207086
# Content-Type: application/json

# # Ejemplo con el número +56912345678 (sin codificar, REST client podría manejarlo):
# # GET {{baseUrl}}/api/query-order-status/?phone=+56912345678
# # Content-Type: application/json


# ### 4. Consultar con un email que NO existe (espera una lista vacía)
# GET {{baseUrl}}/api/query-order-status/?email=noexiste@example.com
# Content-Type: application/json


# ### 5. Consultar sin ningún parámetro (espera un error 400)
# GET {{baseUrl}}/api/query-order-status/
# Content-Type: application/json







# Variable para la URL base de tu API
# Reemplaza con la URL de tu servicio en Render.com o localhost para pruebas locales
@baseUrl = https://django-flow-api.onrender.com
# @baseUrl = http://localhost:8000


### 1. Listar todos los artículos del blog (o productos)
# Este endpoint debería devolver un array JSON.
# Verifica que los objetos artículo/producto incluyan los nuevos campos:
# "image": "URL_a_la_imagen_subida.jpg",
# "additional_image_urls": ["url1", "url2", ...],
# "video_urls": ["url_video1", ...]
GET {{baseUrl}}/api/blog/posts/
Accept: application/json


### 2. Ver detalle de un artículo específico por su slug
# RECUERDA: Reemplaza '<slug-de-tu-articulo-con-imagenes>' con un slug real 
# de un artículo que tenga una imagen principal subida y, si es posible, URLs adicionales.
GET {{baseUrl}}/api/blog/posts/<slug-de-tu-articulo-con-imagenes>/
Accept: application/json


### Ejemplo para un slug específico (descomenta y edita el slug):
# @myBlogSlug = kit-premium-autocultivo-ostra-rey 
# # (o el slug de un artículo de blog que hayas creado con la nueva estructura)

# GET {{baseUrl}}/api/blog/posts/{{myBlogSlug}}/
# Accept: application/json