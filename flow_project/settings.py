"""
Django settings for flow_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$o7-r!%civl+zfirday!747=u(9m5#y5ielukwi@)r8-(@7#&x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS_STRING = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost')
ALLOWED_HOSTS = ALLOWED_HOSTS_STRING.split(',') if ALLOWED_HOSTS_STRING else []

CSRF_TRUSTED_ORIGINS = [
    'https://django-flow-api.onrender.com',
    # Si tuvieras un dominio personalizado en el futuro, como 'https://www.tuempresa.com', lo añadirías aquí.
]

PUBLIC_URL_BASE = os.getenv('PUBLIC_URL_BASE', f"http://localhost:8000")

FUNGIFRESH_STORE_URL = os.getenv('FUNGIFRESH_STORE_URL', 'http://localhost:3000') # URL base de la tienda frontend



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # El framework para crear APIs
    'corsheaders',
    'payments',
    'products',
    'blog'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'flow_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'flow_project.wsgi.application'




# --- CONFIGURACIÓN DE BASE DE DATOS ---
# La ruta donde se montará el disco persistente en Render
# En desarrollo local, si SQLITE_MOUNT_PATH no está seteada, usará BASE_DIR.
DB_MOUNT_DIR_STR = os.getenv('SQLITE_DB_MOUNT_PATH', str(BASE_DIR))
DB_MOUNT_DIR = Path(DB_MOUNT_DIR_STR)


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DB_MOUNT_DIR  / 'db.sqlite3',
    }
}



# --- CONFIGURACIÓN DE EMAIL ---
# Para desarrollo local, puedes dejar DJANGO_EMAIL_BACKEND sin definir en .env
# y se usará el console backend (los emails se imprimen en la terminal).
EMAIL_BACKEND = os.getenv('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST') # Ej: 'smtp.sendgrid.net'
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587)) # 587 para TLS, 465 para SSL
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False') == 'True' # Solo uno de TLS o SSL debe ser True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER') # Ej: 'apikey' para SendGrid, o tu email para Gmail
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') # La API Key de SendGrid, o contraseña de app para Gmail
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'patricio.dilet@gmail.com') # Email "De" por defecto

# Email del dueño de la tienda para notificaciones de venta
STORE_OWNER_EMAIL = os.getenv('STORE_OWNER_EMAIL', 'patricio.dilet@gmail.com')

N8N_SALE_WEBHOOK_URL = os.getenv('N8N_SALE_WEBHOOK_URL')

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-2') # Pon tu región o un default

# Define el backend de almacenamiento por defecto para los archivos subidos por usuarios (MEDIA)
# Si AWS_STORAGE_BUCKET_NAME está definido, usamos S3. Si no, usamos el sistema de archivos local (para desarrollo).
if AWS_STORAGE_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    AWS_S3_FILE_OVERWRITE = False  # No sobrescribir archivos con el mismo nombre
    AWS_DEFAULT_ACL = None         # Usaremos políticas de bucket para el acceso público, no ACLs de objeto
    AWS_S3_SIGNATURE_VERSION = 's3v4' # Necesario para muchas regiones
    AWS_QUERYSTRING_AUTH = False     # No usar URLs firmadas para GET si el bucket es público para lectura
    AWS_S3_VERIFY = True           # Verificar certificados SSL (más seguro)

    # Opcional: para guardar archivos en una subcarpeta 'media' dentro del bucket S3
    AWS_LOCATION = os.getenv('AWS_LOCATION', 'media')
    MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/{AWS_LOCATION}/'

    # Si usas un custom domain con CloudFront para S3, lo configurarías así:
    # AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com' # O tu dominio de CloudFront
    # MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'

    # MEDIA_ROOT no es usado por S3Boto3Storage para guardar archivos, 
    # pero Django podría necesitarlo para otras cosas. Lo dejamos apuntando localmente.
    MEDIA_ROOT = BASE_DIR / 'mediafiles_local_temp' # Carpeta temporal local, no usada por S3 para guardar
else:
    # Configuración para desarrollo local (si no están definidas las variables de S3)
    # Esto permite que sigas subiendo archivos localmente sin S3 si lo deseas.
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'mediafiles' # Donde se guardan localmente
    if not os.path.exists(MEDIA_ROOT):
        os.makedirs(MEDIA_ROOT)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'staticfiles' 

# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'

MEDIA_ROOT_BASE_ENV = os.getenv('DJANGO_MEDIA_ROOT_BASE')

if MEDIA_ROOT_BASE_ENV:
    # En producción (Render), esta variable apuntará a tu disco persistente
    # Ej: '/var/data/render_media_files'
    MEDIA_ROOT = Path(MEDIA_ROOT_BASE_ENV) / 'media' 
else:
    # En desarrollo local
    MEDIA_ROOT = BASE_DIR / 'mediafiles'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ALLOWED_HOSTS_STRING = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1')
# ALLOWED_HOSTS = ['https://xns35swf-8000.brs.devtunnels.ms/', '127.0.0.1', 'localhost']
# ALLOWED_HOSTS = ALLOWED_HOSTS_STRING.split(',') if ALLOWED_HOSTS_STRING else []

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # Usa 'verbose' para más detalle
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG', # Cambiamos a DEBUG para ver todo
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'), # Cambiamos a DEBUG
            'propagate': False,
        },
    },
}



# flow_project/settings.py (al final del archivo)

# --- Configuración de CORS ---
# Lista de orígenes (dominios) que tienen permitido hacer peticiones a tu API.
# Reemplaza "https://www.dominio-de-tu-tienda.com" con el dominio real de la tienda.
CORS_ALLOWED_ORIGINS = [
    "https://6000-firebase-studio-1748310273827.cluster-iesosxm5fzdewqvhlwn5qivgry.cloudworkstations.dev",  # Dominio de producción de la tienda
    "http://www.6000-firebase-studio-1748310273827.cluster-iesosxm5fzdewqvhlwn5qivgry.cloudworkstations.dev",   # Si también usan HTTP (aunque HTTPS es lo ideal)
    # Si el desarrollador frontend usa un servidor local para pruebas, añade su URL:
    "http://localhost:3000",                 # Ejemplo si usan React/Vue en el puerto 3000
    "http://localhost:8080",                 # Ejemplo para otro puerto común de desarrollo frontend
    # Añade otros orígenes si es necesario
    "https://fungigrow.cl",
]

# Opcional: Si necesitas permitir todos los subdominios de un dominio principal:
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^https://\w+\.dominio-de-tu-tienda\.com$",
# ]

# Para una configuración más abierta SÓLO DURANTE EL DESARROLLO INICIAL (¡NO RECOMENDADO PARA PRODUCCIÓN!):
# Si no sabes exactamente el dominio del frontend todavía o para pruebas rápidas:
# CORS_ALLOW_ALL_ORIGINS = True 
# Si usas esto, asegúrate de cambiarlo a CORS_ALLOWED_ORIGINS antes de ir a producción real.

# Opcional: Si el frontend necesita enviar cookies o cabeceras de autenticación HTTP
# CORS_ALLOW_CREDENTIALS = True

# Opcional: Métodos HTTP permitidos (GET, POST, PUT, PATCH, DELETE, OPTIONS son comunes)
# CORS_ALLOW_METHODS = [
#     "DELETE",
#     "GET",
#     "OPTIONS",
#     "PATCH",
#     "POST",
#     "PUT",
# ]

# Opcional: Cabeceras HTTP permitidas
# CORS_ALLOW_HEADERS = [
#     "accept",
#     "authorization",
#     "content-type",
#     "user-agent",
#     "x-csrftoken",
#     "x-requested-with",
# ]